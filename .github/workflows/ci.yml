name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  HARDHAT_NETWORK: hardhat

jobs:
  # Lint and format check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check Prettier formatting
        run: npm run format:check
        
      - name: Solidity lint with Solhint
        run: npx solhint 'contracts/**/*.sol'

  # Compile contracts
  compile:
    name: Compile Contracts
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Compile contracts
        run: npx hardhat compile
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: contract-artifacts
          path: |
            artifacts/
            cache/
            typechain-types/

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: contract-artifacts
          
      - name: Run unit tests
        run: npm run test
        
      - name: Generate coverage report
        run: npm run coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Gas reporting
  gas-report:
    name: Gas Report
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: contract-artifacts
          
      - name: Generate gas report
        run: npm run gas-report
        
      - name: Comment gas report
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const gasReport = fs.readFileSync('./gas-report.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## â›½ Gas Report\n\n\`\`\`\n${gasReport}\n\`\`\``
            });

  # Frontend tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build frontend
        run: npm run build

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [compile, test]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: oracle_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: contract-artifacts
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/oracle_test

  # Security scans
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: contract-artifacts
          
      - name: Run Slither analysis
        uses: crytic/slither-action@v0.3.0
        id: slither
        with:
          node-version: ${{ env.NODE_VERSION }}
          fail-on: medium
          
      - name: Upload Slither results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: results.sarif

  # Build and push Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, frontend-test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        service: [frontend, oracle]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name iyield-staging-cluster
          
      - name: Deploy to staging
        run: |
          kubectl set image deployment/iyield-frontend iyield-frontend=ghcr.io/${{ github.repository }}-frontend:develop -n iyield
          kubectl set image deployment/iyield-oracle iyield-oracle=ghcr.io/${{ github.repository }}-oracle:develop -n iyield
          kubectl rollout status deployment/iyield-frontend -n iyield --timeout=300s
          kubectl rollout status deployment/iyield-oracle -n iyield --timeout=300s

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name iyield-cluster
          
      - name: Deploy to production
        run: |
          kubectl set image deployment/iyield-frontend iyield-frontend=ghcr.io/${{ github.repository }}-frontend:main -n iyield
          kubectl set image deployment/iyield-oracle iyield-oracle=ghcr.io/${{ github.repository }}-oracle:main -n iyield
          kubectl rollout status deployment/iyield-frontend -n iyield --timeout=600s
          kubectl rollout status deployment/iyield-oracle -n iyield --timeout=600s
          
      - name: Post-deployment verification
        run: |
          kubectl get pods -n iyield
          kubectl get services -n iyield
          
      - name: Update deployment receipts
        run: |
          echo "Deployment completed at $(date)" > deployment-receipt.txt
          aws s3 cp deployment-receipt.txt s3://iyield-deployment-receipts/$(date +%Y%m%d-%H%M%S)-deployment.txt